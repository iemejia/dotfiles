[alias]
    # commit
    co = checkout
    ci = commit
    cm = commit -m
    cma = commit -a -m
    st = status
    br = branch

    ec = config --global -e

    # diff section
    df = diff
    d = diff --color-words
    dc = diff --cached
    #list modified files in last commit
    #dl = "!git ll -1"
    #diff last commit
    dlc = diff --cached HEAD~
    changes = diff --name-status
    diffstat = diff --stat
    ds = diff --stat
    dl = diff HEAD~
    # show the diff of the last commit
    last = log -1 -p

    type = cat-file -t
    dump = cat-file -p

    # log section
	hist = log --pretty=format:\"%h %ad | %s%d [%an]\" --graph --date=short
    lg1 = log --graph --abbrev-commit --decorate --date=relative --format=format:'%C(bold blue)%h%C(reset) - %C(bold green)(%ar)%C(reset) %C(white)%s%C(reset) %C(dim white)- %an%C(reset)%C(bold yellow)%d%C(reset)' --all
    lg2 = log --graph --abbrev-commit --decorate --format=format:'%C(bold blue)%h%C(reset) - %C(bold cyan)%aD%C(reset) %C(bold green)(%ar)%C(reset)%C(bold yellow)%d%C(reset)%n''          %C(white)%s%C(reset) %C(dim white)- %an%C(reset)' --all
    lg = !"git lg1"
    lgf = log --pretty=format:'%Cred%h%Creset%d - %C(yellow)%s%C(bold blue) <%cn>' --decorate --numstat
    lp = !git lg -p
    ll = log --stat --abbrev-commit
    lt = log --graph --oneline --decorate --all
    # see changes after the last pull
    lc = !git oneline ORIG_HEAD.. --stat --no-merges
    oneline = log --pretty=oneline --abbrev-commit --graph --decorate
    new = !sh -c 'git log $1@{1}..$1@{0} "$@"'
    # shows a version
    whatis = show -s --pretty='tformat:%h (%s, %ad)' --date=short
    # If you use shortened hashes, sometimes you may encounter a collision. The following alias prints out all commits whose hash start with given string
    abbr = "!sh -c 'git rev-list --all | grep ^$1 | while read commit; do git --no-pager log -n1 --pretty=format:\"%H %ci %an %s%n\" $commit; done' -"
    # To see the changes in a branch since it was forked from another branch, or since the last merge with the origin branch, you can add this 'forkdiff' alias
    forkdiff = !bash -c 'git diff $(git merge-base "$1" "$2") "$2" "${@: 3}" ' -
    # numcommits = "log -a --pretty=oneline | wc -l"

    find = !sh -c 'git ls-tree -r --name-only HEAD | grep --color $1' -
    h = !git --no-pager log origin/master..HEAD --abbrev-commit --pretty=oneline
    #grep on filename
    f = "!git ls-files | grep -i"

    #reset commands
    r = reset
    r1 = reset HEAD~
    r2 = reset HEAD~2
    rh = reset --hard
    rh1 = reset HEAD~ --hard
    rh2 = reset HEAD~2 --hard

    # subversion ones
    spull = svn rebase
    spush = svn dcommit
    svnr = svn rebase
    svnd = svn dcommit
    svnl = svn log --oneline --show-commit

    # undo section
    undo = reset --soft HEAD~
    unstage = reset HEAD
    amend = commit --amend
    ## this onew should be done after a reset via undo
    redo = commit -a -c ORIG_HEAD
    #redo = commit -a -e -F .git/COMMIT_EDITMSG

    # identifies who did something
    who = shortlog -sne
    whois = "!sh -c 'git log -i -1 --pretty=\"format:%an <%ae>\n\" --author=\"$1\"' -"

    # reopens non commited files (to continue work)
    #    mate = !git-ls-files -m -z | xargs -0 emacsclient -t -a=\\\"\\\"
    #    mateall = !git-ls-files -m -o --exclude-standard -z | xargs -0 emacsclient -t -a=\\\"\\\"
    # show all defined aliases
    alias = !git config --list | grep 'alias\\.' | sed 's/alias\\.\\([^=]*\\)=\\(.*\\)/\\1\\t=> \\2/' | sort
    # add arg to local .gitignore file
#    ignore = !([ ! -e .gitignore ] && touch .gitignore) | echo $1 >>.gitignore

    # github ones
    pm = push origin master
    cp = !git ci && git pm
    fu = fetch upstream
    mu = merge upstream/master
    pu = !git fu && git mu
    puf = pull upstream/master --ff-only

    ai = add --interactive

    # stash
    sl = stash list
    sa = stash apply
    ss = stash save
    sc = stash clear
    sp = stash pop
    sd = stash drop
    su = stash unapply

    # tags
    lasttag = describe --tags --abbrev=0
    lt = describe --tags --abbrev=0

    # merges
    ours = "!f() { git co --ours $@ && git add $@; }; f"
    theirs = "!f() { git co --theirs $@ && git add $@; }; f"

    #list remotes
    rem="!git config -l | grep remote.*url | tail -n +2"

    #apply patch from other local repo
#    lap = "!f() { git --git-dir=$1 format-patch -k -1 --stdout $2 | git am -3 -k; }; f"

    #subtree add
#    sba = "!f() { git subtree add --prefix $2 $1 master --squash; }; f" 
#

    # some alias from github flow
    # pulls changes and rebase local commits to come after the commits I pulled down, it also removes remote tracking branches that dont exist
    up = !git pull --rebase --prune $@ && git submodule update --init --recursive
    # All new work starts in a branch
    cob = checkout -b
    # I commit regularly
    cm = !git add -A && git commit -m

    # git save or git wip. The first one adds all changes including untracked files and creates a commit. The second one only commits tracked changes. I generally use the first one.

    save = !git add -A && git commit -m 'SAVEPOINT'
    wip = !git add -u && git commit -m "WIP"
    undo2 = reset HEAD~1 --mixed

[user]
	name = Ismaël Mejía
	email = iemejia@gmail.com
[color]
	diff = auto
	status = auto

	branch = auto
	ui = auto
	interactive = auto
[core]
	editor = vim # emacsclient -t -a=\\\"\\\"
	autocrlf = input
	safecrlf = true
	pager = less -R
	whitespace = trailing-space,space-before-tab,blank-at-eol
[include]
	path = ~/.github
[credential]
        helper = cache --timeout=604800
#	helper = /usr/share/doc/git/contrib/credential/gnome-keyring/git-credential-gnome-keyring
#	helper = osxkeychain
[merge]
	tool = vimdiff
	stat = true
[diff]
	tool = vimdiff
	renames = copies
	mnemonicprefix = true
[mergetool]
	prompt = false
[difftool]
	prompt = false
[push]
	#default = simple
[advice]
	statusHints = false
#	pushNonFastForward = false
[branch]
	autosetupmerge = true
[rerere]
	enabled = true
[help]
	autocorrect = 1
[color "diff"]
	whitespace = red reverse
