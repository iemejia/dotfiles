[alias]
    # clone
    shallow = clone --depth 1

    # commit
    co = checkout
    ci = commit
    ca = commit -a
    cm = commit -m
    cma = commit -a -m
    cam = commit -a -m
    caa = commit --all --amend --no-edit
    cis = commit -S

    st = status
    br = branch

    ec = config --global -e

    # diff section
    df = diff
    d = diff --color-words
    dc = diff --cached
    dft = difftool
    dlog = "!f() { GIT_EXTERNAL_DIFF=difft git log -p --ext-diff $@; }; f"

    #list modified files in last commit
    #dl = "!git ll -1"
    #diff last commit
    dlc = diff --cached HEAD^
    changes = diff --name-status
    diffstat = diff --stat
    ds = diff --stat
    dl = diff HEAD@{1}
    # show the diff of the last commit
    last = log -1 HEAD -p

    tree = log --all --decorate --oneline --graph
    lg = log --graph --abbrev-commit --decorate --format=format:'%C(bold blue)%h%C(reset) - %C(bold green)(%ar)%C(reset) %C(white)%s%C(reset) %C(dim white)- %an%C(reset)%C(bold yellow)%d%C(reset)' --all

    type = cat-file -t
    dump = cat-file -p

    # see changes after the last pull
    new = !sh -c 'git log $1@{1}..$1@{0} "$@"'
    # shows a version
    whatis = show -s --pretty='tformat:%h (%s, %ad)' --date=short
    # If you use shortened hashes, sometimes you may encounter a collision. The following alias prints out all commits whose hash start with given string
    abbr = "!sh -c 'git rev-list --all | grep ^$1 | while read commit; do git --no-pager log -n1 --pretty=format:\"%H %ci %an %s%n\" $commit; done' -"
    # To see the changes in a branch since it was forked from another branch, or since the last merge with the origin branch, you can add this 'forkdiff' alias
    forkdiff = !bash -c 'git diff $(git merge-base "$1" "$2") "$2" "${@: 3}" ' -
    # numcommits = "log -a --pretty=oneline | wc -l"

    find = !sh -c 'git ls-tree -r --name-only HEAD | grep --color $1' -
    h = !git --no-pager log origin/master..HEAD --abbrev-commit --pretty=oneline
    #grep on filename
    f = "!git ls-files | grep -i"

    # subversion ones
    spull = svn rebase
    spush = svn dcommit
    svnr = svn rebase
    svnd = svn dcommit
    svnl = svn log --oneline --show-commit

    # identifies who did something
    who = shortlog -sne
    whois = "!sh -c 'git log -i -1 --pretty=\"format:%an <%ae>\n\" --author=\"$1\"' -"

    # reopens non commited files (to continue work)
    #    mate = !git-ls-files -m -z | xargs -0 emacsclient -t -a=\\\"\\\"
    #    mateall = !git-ls-files -m -o --exclude-standard -z | xargs -0 emacsclient -t -a=\\\"\\\"
    # show all defined aliases
    alias = !git config --list | grep 'alias\\.' | sed 's/alias\\.\\([^=]*\\)=\\(.*\\)/\\1\\t=> \\2/' | sort
    # add arg to local .gitignore file
#    ignore = !([ ! -e .gitignore ] && touch .gitignore) | echo $1 >>.gitignore

    a = add
    ai = add --interactive
    ap = add -p

    # github iemejia based ones
    pi = push iemejia
    pim = push iemejia master

    # stash
    sl = stash list
    sa = stash apply
    ss = stash save
    sc = stash clear
    sp = stash pop
    sd = stash drop
    su = stash unapply
    stash-all = stash save --include-untracked

    # tags
    lasttag = describe --tags --abbrev=0
    lt = describe --tags --abbrev=0

    # merges
    ours = "!f() { git co --ours $@ && git add $@; }; f"
    theirs = "!f() { git co --theirs $@ && git add $@; }; f"

    #list remotes
    rem="!git config -l | grep remote.*url | tail -n +2"

    #apply patch from other local repo
#    lap = "!f() { git --git-dir=$1 format-patch -k -1 --stdout $2 | git am -3 -k; }; f"

    #subtree add
#    sba = "!f() { git subtree add --prefix $2 $1 master --squash; }; f"

    # some alias from github flow
    # pulls changes and rebase local commits to come after the commits I pulled down, it also removes remote tracking branches that dont exist
    up = !git pull --rebase --prune $@ && git submodule update --init --recursive
    update-branch = "!f() { git update-ref refs/heads/$1 refs/remotes/origin/$1; }; f"

[user]
    name = Ismaël Mejía
    email = iemejia@gmail.com
    # email = iemejia@apache.org
    signingkey = 0A9DAF6713B86349
[color]
    diff = auto
    status = auto

    branch = auto
    ui = auto
    interactive = auto
[core]
    editor = vim # emacsclient -t -a=\\\"\\\"
    autocrlf = input
    safecrlf = true
    # pager = less -R
    # pager = diff-so-fancy | less --tabs=4 -RFX
    whitespace = trailing-space,space-before-tab,blank-at-eol
    # preserve file metadata
    #filemode = true
[include]
    path = ~/.github
[credential]
    helper = cache --timeout=604800
    # helper = /usr/share/doc/git/contrib/credential/libsecret/git-credential-libsecret
    # helper = osxkeychain
[merge]
    tool = vimdiff
    stat = true
    conflictstyle = zdiff3
[diff]
    algorithm = histogram
    tool = difftastic
    #external = difft
    renames = copies
    mnemonicprefix = true
	submodule = log
[mergetool]
    prompt = false
[difftool]
    prompt = false
[difftool "difftastic"]
    cmd = difft "$LOCAL" "$REMOTE"
[pager]
    difftool = true
[push]
    default = current
    # use simple if you only use git 2.0 (not yet my case)
    # default = simple
[advice]
    statusHints = false
    # pushNonFastForward = false
[branch]
    autosetupmerge = true
    #autosetuprebase = always
[rerere]
    enabled = true
[help]
    autocorrect = 1
[color "diff"]
    whitespace = red reverse
[hub]
    protocol = https
[pull]
    rebase = true
[sendemail]
    smtpserver = smtp.gmail.com
    smtpserverport = 587
    smtpencryption = tls
    smtpuser = iemejia@gmail.com
    confirm = auto
    chainreplyto = false
    # smtppass = your_password
[commit]
    # always sign commits with gpg
    #gpgsign = true
    template = ~/.git_commit_msg.txt
	verbose = true
[rebase]
    autostash = true
[init]
    defaultBranch = main
[http]
    postBuffer = 2147483648
    lowSpeedLimit = 0
    lowSpeedTime = 999999
# [interactive]
    # diffFilter = diff-so-fancy --patch
[filter "lfs"]
    required = true
    clean = git-lfs clean -- %f
    smudge = git-lfs smudge -- %f
    process = git-lfs filter-process

[transfer]
    fsckobjects = true
[fetch]
    fsckobjects = true
[receive]
    fsckobjects = true
[status]
    submoduleSummary = true
[submodule]
    recurse = true


